[
  {
    "PostId": 1,
    "UserId": 1,
    "Author": "aber",
    "Title": "Object Oriented Programming Using C#",
    "Content": "Object-oriented programming (OOP) is the core ingredient of the .NET framework. OOP is so important that, before embarking on the road to .NET, you must understand its basic principles and terminology to write even a simple program. The fundamental idea behind OOP is to ...",
    "EditionDate": "2021-06-08",
    "Status": 1
  },
  {
    "PostId": 2,
    "UserId": 2,
    "Author": "pdup",
    "Title": "Singleton Design Pattern in C#",
    "Content": "Singleton design pattern in C# is one of the most popular design patterns. In this pattern, a class has only one instance in the program that provides a global point of access to it. In other words, a singleton is a class that allows only a single instance of itself to be created...",
    "EditionDate": "2021-06-09",
    "Status": 1
  },
  {
    "PostId": 3,
    "UserId": 2,
    "Author": "pdup",
    "Title": "Explain Constructors Using C# Programming Language",
    "Content": "Here's how we declare a constructor. As you see, we have a class called customer. This class has a constructor as you see here a constructor has the exact same name as the class and that's a requirement. If you change this name in the compiler or the runtime, it will not treat these as a constructor. Also note that constructors, unlike other methods, do not have a return type, not even void here in this method. We can do any kind of...",
    "EditionDate": "2021-06-09",
    "Status": 2
  },
  {
    "PostId": 4,
    "UserId": 3,
    "Author": "smah",
    "Title": "Interface Segregation Principle Using C#",
    "Content": "When we design/develop a class, that class should not implement any such interfaces which are not required by the customer even if it is related to that class which we are designing or developing...",
    "EditionDate": "2021-06-10",
    "Status": 0
  }
]